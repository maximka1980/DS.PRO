{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ваш алгоритм угадывает число в среднем за 6 попыток\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "count = 0                            # счетчик попыток\n",
    "number = np.random.randint(1,101)    # загадали число\n",
    "#print (\"Загадано число от 1 до 100\", number)\n",
    "\n",
    "def game_core_v1(number):\n",
    "    '''Просто угадываем на random, никак не используя информацию о больше или меньше.\n",
    "       Функция принимает загаданное число и возвращает число попыток'''\n",
    "    count = 0\n",
    "    while True:\n",
    "        count+=1\n",
    "        predict = np.random.randint(1,101) # предполагаемое число\n",
    "        if number == predict: \n",
    "            return(count) # выход из цикла, если угадали\n",
    "\n",
    "def game_core_v2(number):\n",
    "    '''Сначала устанавливаем любое random число, а потом уменьшаем или увеличиваем его в зависимости от того, больше оно или меньше нужного.\n",
    "       Функция принимает загаданное число и возвращает число попыток'''\n",
    "    count = 1\n",
    "\n",
    "    predict = np.random.randint(1,101)\n",
    "    while number != predict:\n",
    "        count+=1\n",
    "        if number > predict: \n",
    "            predict += 1\n",
    "        elif number < predict: \n",
    "            predict -= 1\n",
    "    return(count) # выход из цикла, если угадали\n",
    "\n",
    "def game_core_v3(number):\n",
    "    ''' аналог бинарного метода , только используется условие не \"больше меньше\" , а условие вхождения в диапазон'''\n",
    "    \n",
    "    # устанавливаем стартовые значений переменных для обработки диапазонов\n",
    "    start_range = 0\n",
    "    mid_range  = 25\n",
    "    end_range = 50\n",
    "    # строка для отладки кода print(\"начальные значения счетчиков\",start_range,mid_range,end_range,\"загаданное число\",number)\n",
    "    predict = 0\n",
    "    magic = 100\n",
    "    counter = 0\n",
    "    \n",
    "    # цикл для подсчета попыток \n",
    "    while number != predict:\n",
    "        counter += 1 #счетчик попыток\n",
    "    \n",
    "    # основной алгоритм, делим диапазоны и сверяем наличие сгенерированого числа из диапазона \n",
    "    # на равенство загаданному компьютером\n",
    "        \n",
    "        if number in range(start_range,end_range):\n",
    "            magic = end_range\n",
    "            end_range = mid_range       \n",
    "            #проверка последней итерации что бы исключить ошибку генерации из диапазона \n",
    "            if start_range >= end_range:  \n",
    "                break\n",
    "            # генерируем новое случайное число из диапазона в котором есть искомое число\n",
    "            predict = np.random.randint(start_range,end_range)\n",
    "            mid_range = start_range + (len(range(start_range, end_range)))//2\n",
    "        else:\n",
    "            # строка для отладки кода print(number,\"не в диапазоне\",start_range,end_range,\"predict\",predict)\n",
    "            start_range = end_range + 1\n",
    "            end_range = magic\n",
    "            #проверка последней итерации что бы исключить ошибку генерации из диапазона \n",
    "            if start_range >= end_range:\n",
    "                break\n",
    "            # генерируем новое случайное число из диапазона в котором есть искомое число\n",
    "            predict = np.random.randint(start_range,end_range)\n",
    "            magic = end_range\n",
    "            mid_range = start_range + (len(range(start_range, end_range)))//2\n",
    "     \n",
    "    return(counter)\n",
    "\n",
    "def score_game(game_core):\n",
    "    '''Запускаем игру 1000 раз, чтобы узнать, как быстро игра угадывает число'''\n",
    "    count_ls = []\n",
    "    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!\n",
    "    random_array = np.random.randint(1,101, size=(1000))\n",
    "    for number in random_array:\n",
    "        count_ls.append(game_core(number))\n",
    "    score = int(np.mean(count_ls))\n",
    "    print(f\"Ваш алгоритм угадывает число в среднем за {score} попыток\")\n",
    "    return(score)\n",
    "\n",
    "# запускаем\n",
    "#score_game(game_core_v1)\n",
    "#score_game(game_core_v2)\n",
    "score_game(game_core_v3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
